import os
import cv2
import numpy as np
import matplotlib.pyplot as plt

# Define folder path containing the images
folder_path = '109335-flattop'
image_files = [f for f in os.listdir(folder_path) if f.endswith('.jpg') or f.endswith('.png')]
image_files.sort()

# Time per frame in seconds
time_per_frame = 2 / 10000.0  # Convert to seconds

crop_width = 50  # Width of the cropped area
crop_height = 70  # Height of the cropped area

# Specific frames to process (ensure the frames are within the range of available images)
frames = [
    {'t': i, 'x': 480, 'y': 200, 'B': 1.15} for i in range(len(image_files))  # Process all images
]

image_data = []

for frame in frames:
    t = frame['t']
    x = frame['x']
    y = frame['y']
    brightness_factor = frame['B']

    image_file = image_files[t]  # Get the corresponding image for this frame
    image_path = os.path.join(folder_path, image_file)
    img = cv2.imread(image_path)

    if img is None:
        print(f"Error: The image at {image_path} could not be loaded.")
        continue

    # Convert to grayscale
    img_gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)

    # Crop the image
    img_cropped = img_gray[y:y + crop_height, x:x + crop_width]

    if img_cropped.shape[0] == 0 or img_cropped.shape[1] == 0:
        print(f"Error: Cropping parameters out of bounds for image at {image_path}.")
        continue

    # Apply brightness factor
    img_bright = np.clip(img_cropped.astype(np.float32) * brightness_factor, 0, 255).astype(np.uint8)

    # Normalize the image
    img_normalized = img_bright / 255.0

    # Standardize the image
    bn = (img_normalized - img_normalized.mean()) / (img_normalized.max() - img_normalized.min())
    img_bn = bn - bn.min()

    # Apply threshold
    img_binary = np.where(img_bn > 0.99, 1, 0).astype(np.uint8)

    # Remove images with more than 10 bright spots
    if np.sum(img_binary == 1) > 10:
        print(f"Skipping image at {image_path} due to too many bright spots.")
        continue

    image_data.append(img_binary)

# Summing the binary images (excluding images with too many bright spots)
if image_data:  # Check if there is at least one valid image
    img_sum = np.zeros_like(image_data[0], dtype=np.float32)
    for data in image_data:
        img_sum += data.astype(np.float32)
    img_sum = np.clip(img_sum, 0, 255).astype(np.uint8)
else:
    img_sum = None

# Plot the summed image
if img_sum is not None:
    plt.imshow(img_sum, cmap='gray')
    plt.title('Summed Image')
    plt.axis('off')  # Turn off the axis
    plt.show()
else:
    print("No valid images to process.")
